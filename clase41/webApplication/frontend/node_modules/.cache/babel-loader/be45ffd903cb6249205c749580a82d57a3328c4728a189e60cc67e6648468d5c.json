{"ast":null,"code":"/*\n  fake.js - generator method for combining faker methods based on string input\n\n*/\n\nfunction Fake(faker) {\n  /**\n   * Generator method for combining faker methods based on string input\n   *\n   * __Example:__\n   *\n   * ```\n   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));\n   * //outputs: \"Marks, Dean Sr.\"\n   * ```\n   *\n   * This will interpolate the format string with the value of methods\n   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},\n   * and [name.suffix]{@link faker.name.suffix}\n   *\n   * @method faker.fake\n   * @param {string} str\n   */\n  this.fake = function fake(str) {\n    // setup default response as empty string\n    var res = '';\n\n    // if incoming str parameter is not provided, return error message\n    if (typeof str !== 'string' || str.length === 0) {\n      throw new Error('string parameter is required!');\n    }\n\n    // find first matching {{ and }}\n    var start = str.search('{{');\n    var end = str.search('}}');\n\n    // if no {{ and }} is found, we are done\n    if (start === -1 && end === -1) {\n      return str;\n    }\n\n    // console.log('attempting to parse', str);\n\n    // extract method name from between the {{ }} that we found\n    // for example: {{name.firstName}}\n    var token = str.substr(start + 2, end - start - 2);\n    var method = token.replace('}}', '').replace('{{', '');\n\n    // console.log('method', method)\n\n    // extract method parameters\n    var regExp = /\\(([^)]+)\\)/;\n    var matches = regExp.exec(method);\n    var parameters = '';\n    if (matches) {\n      method = method.replace(regExp, '');\n      parameters = matches[1];\n    }\n\n    // split the method into module and function\n    var parts = method.split('.');\n    if (typeof faker[parts[0]] === \"undefined\") {\n      throw new Error('Invalid module: ' + parts[0]);\n    }\n    if (typeof faker[parts[0]][parts[1]] === \"undefined\") {\n      throw new Error('Invalid method: ' + parts[0] + \".\" + parts[1]);\n    }\n\n    // assign the function from the module.function namespace\n    var fn = faker[parts[0]][parts[1]];\n\n    // If parameters are populated here, they are always going to be of string type\n    // since we might actually be dealing with an object or array,\n    // we always attempt to the parse the incoming parameters into JSON\n    var params;\n    // Note: we experience a small performance hit here due to JSON.parse try / catch\n    // If anyone actually needs to optimize this specific code path, please open a support issue on github\n    try {\n      params = JSON.parse(parameters);\n    } catch (err) {\n      // since JSON.parse threw an error, assume parameters was actually a string\n      params = parameters;\n    }\n    var result;\n    if (typeof params === \"string\" && params.length === 0) {\n      result = fn.call(this);\n    } else {\n      result = fn.call(this, params);\n    }\n\n    // replace the found tag with the returned fake value\n    res = str.replace('{{' + token + '}}', result);\n\n    // return the response recursively until we are done finding all tags\n    return fake(res);\n  };\n  return this;\n}\nmodule['exports'] = Fake;","map":{"version":3,"names":["Fake","faker","fake","str","res","length","Error","start","search","end","token","substr","method","replace","regExp","matches","exec","parameters","parts","split","fn","params","JSON","parse","err","result","call","module"],"sources":["/Volumes/Datos/Coderhouse/Comision32065Coderhouse/clase41/webApplication/frontend/node_modules/faker/lib/fake.js"],"sourcesContent":["/*\n  fake.js - generator method for combining faker methods based on string input\n\n*/\n\nfunction Fake (faker) {\n  \n  /**\n   * Generator method for combining faker methods based on string input\n   *\n   * __Example:__\n   *\n   * ```\n   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));\n   * //outputs: \"Marks, Dean Sr.\"\n   * ```\n   *\n   * This will interpolate the format string with the value of methods\n   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},\n   * and [name.suffix]{@link faker.name.suffix}\n   *\n   * @method faker.fake\n   * @param {string} str\n   */\n  this.fake = function fake (str) {\n    // setup default response as empty string\n    var res = '';\n\n    // if incoming str parameter is not provided, return error message\n    if (typeof str !== 'string' || str.length === 0) {\n      throw new Error('string parameter is required!');\n    }\n\n    // find first matching {{ and }}\n    var start = str.search('{{');\n    var end = str.search('}}');\n\n    // if no {{ and }} is found, we are done\n    if (start === -1 && end === -1) {\n      return str;\n    }\n\n    // console.log('attempting to parse', str);\n\n    // extract method name from between the {{ }} that we found\n    // for example: {{name.firstName}}\n    var token = str.substr(start + 2,  end - start - 2);\n    var method = token.replace('}}', '').replace('{{', '');\n\n    // console.log('method', method)\n\n    // extract method parameters\n    var regExp = /\\(([^)]+)\\)/;\n    var matches = regExp.exec(method);\n    var parameters = '';\n    if (matches) {\n      method = method.replace(regExp, '');\n      parameters = matches[1];\n    }\n\n    // split the method into module and function\n    var parts = method.split('.');\n\n    if (typeof faker[parts[0]] === \"undefined\") {\n      throw new Error('Invalid module: ' + parts[0]);\n    }\n\n    if (typeof faker[parts[0]][parts[1]] === \"undefined\") {\n      throw new Error('Invalid method: ' + parts[0] + \".\" + parts[1]);\n    }\n\n    // assign the function from the module.function namespace\n    var fn = faker[parts[0]][parts[1]];\n\n    // If parameters are populated here, they are always going to be of string type\n    // since we might actually be dealing with an object or array,\n    // we always attempt to the parse the incoming parameters into JSON\n    var params;\n    // Note: we experience a small performance hit here due to JSON.parse try / catch\n    // If anyone actually needs to optimize this specific code path, please open a support issue on github\n    try {\n      params = JSON.parse(parameters)\n    } catch (err) {\n      // since JSON.parse threw an error, assume parameters was actually a string\n      params = parameters;\n    }\n\n    var result;\n    if (typeof params === \"string\" && params.length === 0) {\n      result = fn.call(this);\n    } else {\n      result = fn.call(this, params);\n    }\n\n    // replace the found tag with the returned fake value\n    res = str.replace('{{' + token + '}}', result);\n\n    // return the response recursively until we are done finding all tags\n    return fake(res);    \n  }\n  \n  return this;\n  \n  \n}\n\nmodule['exports'] = Fake;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,IAAI,CAAEC,KAAK,EAAE;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAG,SAASA,IAAI,CAAEC,GAAG,EAAE;IAC9B;IACA,IAAIC,GAAG,GAAG,EAAE;;IAEZ;IACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;MAC/C,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClD;;IAEA;IACA,IAAIC,KAAK,GAAGJ,GAAG,CAACK,MAAM,CAAC,IAAI,CAAC;IAC5B,IAAIC,GAAG,GAAGN,GAAG,CAACK,MAAM,CAAC,IAAI,CAAC;;IAE1B;IACA,IAAID,KAAK,KAAK,CAAC,CAAC,IAAIE,GAAG,KAAK,CAAC,CAAC,EAAE;MAC9B,OAAON,GAAG;IACZ;;IAEA;;IAEA;IACA;IACA,IAAIO,KAAK,GAAGP,GAAG,CAACQ,MAAM,CAACJ,KAAK,GAAG,CAAC,EAAGE,GAAG,GAAGF,KAAK,GAAG,CAAC,CAAC;IACnD,IAAIK,MAAM,GAAGF,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;;IAEtD;;IAEA;IACA,IAAIC,MAAM,GAAG,aAAa;IAC1B,IAAIC,OAAO,GAAGD,MAAM,CAACE,IAAI,CAACJ,MAAM,CAAC;IACjC,IAAIK,UAAU,GAAG,EAAE;IACnB,IAAIF,OAAO,EAAE;MACXH,MAAM,GAAGA,MAAM,CAACC,OAAO,CAACC,MAAM,EAAE,EAAE,CAAC;MACnCG,UAAU,GAAGF,OAAO,CAAC,CAAC,CAAC;IACzB;;IAEA;IACA,IAAIG,KAAK,GAAGN,MAAM,CAACO,KAAK,CAAC,GAAG,CAAC;IAE7B,IAAI,OAAOlB,KAAK,CAACiB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;MAC1C,MAAM,IAAIZ,KAAK,CAAC,kBAAkB,GAAGY,KAAK,CAAC,CAAC,CAAC,CAAC;IAChD;IAEA,IAAI,OAAOjB,KAAK,CAACiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;MACpD,MAAM,IAAIZ,KAAK,CAAC,kBAAkB,GAAGY,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,KAAK,CAAC,CAAC,CAAC,CAAC;IACjE;;IAEA;IACA,IAAIE,EAAE,GAAGnB,KAAK,CAACiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;IAElC;IACA;IACA;IACA,IAAIG,MAAM;IACV;IACA;IACA,IAAI;MACFA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;IACjC,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ;MACAH,MAAM,GAAGJ,UAAU;IACrB;IAEA,IAAIQ,MAAM;IACV,IAAI,OAAOJ,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAAChB,MAAM,KAAK,CAAC,EAAE;MACrDoB,MAAM,GAAGL,EAAE,CAACM,IAAI,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLD,MAAM,GAAGL,EAAE,CAACM,IAAI,CAAC,IAAI,EAAEL,MAAM,CAAC;IAChC;;IAEA;IACAjB,GAAG,GAAGD,GAAG,CAACU,OAAO,CAAC,IAAI,GAAGH,KAAK,GAAG,IAAI,EAAEe,MAAM,CAAC;;IAE9C;IACA,OAAOvB,IAAI,CAACE,GAAG,CAAC;EAClB,CAAC;EAED,OAAO,IAAI;AAGb;AAEAuB,MAAM,CAAC,SAAS,CAAC,GAAG3B,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}