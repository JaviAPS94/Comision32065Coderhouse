{"ast":null,"code":"// generates fake data for many computer systems properties\n\nvar commonFileTypes = [\"video\", \"audio\", \"image\", \"text\", \"application\"];\nvar commonMimeTypes = [\"application/pdf\", \"audio/mpeg\", \"audio/wav\", \"image/png\", \"image/jpeg\", \"image/gif\", \"video/mp4\", \"video/mpeg\", \"text/html\"];\nfunction setToArray(set) {\n  // shortcut if Array.from is available\n  if (Array.from) {\n    return Array.from(set);\n  }\n  var array = [];\n  set.forEach(function (item) {\n    array.push(item);\n  });\n  return array;\n}\n\n/**\n *\n * @namespace faker.system\n */\nfunction System(faker) {\n  /**\n   * generates a file name\n   *\n   * @method faker.system.fileName\n   */\n  this.fileName = function () {\n    var str = faker.random.words();\n    str = str.toLowerCase().replace(/\\W/g, \"_\") + \".\" + faker.system.fileExt();\n    ;\n    return str;\n  };\n\n  /**\n   * commonFileName\n   *\n   * @method faker.system.commonFileName\n   * @param {string} ext\n   */\n  this.commonFileName = function (ext) {\n    var str = faker.random.words();\n    str = str.toLowerCase().replace(/\\W/g, \"_\");\n    str += \".\" + (ext || faker.system.commonFileExt());\n    return str;\n  };\n\n  /**\n   * mimeType\n   *\n   * @method faker.system.mimeType\n   */\n  this.mimeType = function () {\n    var typeSet = new Set();\n    var extensionSet = new Set();\n    var mimeTypes = faker.definitions.system.mimeTypes;\n    Object.keys(mimeTypes).forEach(function (m) {\n      var type = m.split(\"/\")[0];\n      typeSet.add(type);\n      if (mimeTypes[m].extensions instanceof Array) {\n        mimeTypes[m].extensions.forEach(function (ext) {\n          extensionSet.add(ext);\n        });\n      }\n    });\n    var types = setToArray(typeSet);\n    var extensions = setToArray(extensionSet);\n    var mimeTypeKeys = Object.keys(faker.definitions.system.mimeTypes);\n    return faker.random.arrayElement(mimeTypeKeys);\n  };\n\n  /**\n   * returns a commonly used file type\n   *\n   * @method faker.system.commonFileType\n   */\n  this.commonFileType = function () {\n    return faker.random.arrayElement(commonFileTypes);\n  };\n\n  /**\n   * returns a commonly used file extension\n   *\n   * @method faker.system.commonFileExt\n   */\n  this.commonFileExt = function () {\n    return faker.system.fileExt(faker.random.arrayElement(commonMimeTypes));\n  };\n\n  /**\n   * returns any file type available as mime-type\n   *\n   * @method faker.system.fileType\n   */\n  this.fileType = function () {\n    var typeSet = new Set();\n    var extensionSet = new Set();\n    var mimeTypes = faker.definitions.system.mimeTypes;\n    Object.keys(mimeTypes).forEach(function (m) {\n      var type = m.split(\"/\")[0];\n      typeSet.add(type);\n      if (mimeTypes[m].extensions instanceof Array) {\n        mimeTypes[m].extensions.forEach(function (ext) {\n          extensionSet.add(ext);\n        });\n      }\n    });\n    var types = setToArray(typeSet);\n    var extensions = setToArray(extensionSet);\n    var mimeTypeKeys = Object.keys(faker.definitions.system.mimeTypes);\n    return faker.random.arrayElement(types);\n  };\n\n  /**\n   * fileExt\n   *\n   * @method faker.system.fileExt\n   * @param {string} mimeType\n   */\n  this.fileExt = function (mimeType) {\n    var typeSet = new Set();\n    var extensionSet = new Set();\n    var mimeTypes = faker.definitions.system.mimeTypes;\n    Object.keys(mimeTypes).forEach(function (m) {\n      var type = m.split(\"/\")[0];\n      typeSet.add(type);\n      if (mimeTypes[m].extensions instanceof Array) {\n        mimeTypes[m].extensions.forEach(function (ext) {\n          extensionSet.add(ext);\n        });\n      }\n    });\n    var types = setToArray(typeSet);\n    var extensions = setToArray(extensionSet);\n    var mimeTypeKeys = Object.keys(faker.definitions.system.mimeTypes);\n    if (mimeType) {\n      var mimes = faker.definitions.system.mimeTypes;\n      return faker.random.arrayElement(mimes[mimeType].extensions);\n    }\n    return faker.random.arrayElement(extensions);\n  };\n\n  /**\n   * returns directory path\n   *\n   * @method faker.system.directoryPath\n   */\n  this.directoryPath = function () {\n    var paths = faker.definitions.system.directoryPaths;\n    return faker.random.arrayElement(paths);\n  };\n\n  /**\n   * returns file path\n   *\n   * @method faker.system.filePath\n   */\n  this.filePath = function () {\n    return faker.fake(\"{{system.directoryPath}}/{{system.fileName}}.{{system.fileExt}}\");\n  };\n\n  /**\n   * semver\n   *\n   * @method faker.system.semver\n   */\n  this.semver = function () {\n    return [faker.datatype.number(9), faker.datatype.number(9), faker.datatype.number(9)].join('.');\n  };\n}\nmodule['exports'] = System;","map":{"version":3,"names":["commonFileTypes","commonMimeTypes","setToArray","set","Array","from","array","forEach","item","push","System","faker","fileName","str","random","words","toLowerCase","replace","system","fileExt","commonFileName","ext","commonFileExt","mimeType","typeSet","Set","extensionSet","mimeTypes","definitions","Object","keys","m","type","split","add","extensions","types","mimeTypeKeys","arrayElement","commonFileType","fileType","mimes","directoryPath","paths","directoryPaths","filePath","fake","semver","datatype","number","join","module"],"sources":["/Volumes/Datos/Coderhouse/Comision32065Coderhouse/clase41/webApplication/frontend/node_modules/faker/lib/system.js"],"sourcesContent":["// generates fake data for many computer systems properties\n\nvar commonFileTypes = [\n  \"video\",\n  \"audio\",\n  \"image\",\n  \"text\",\n  \"application\"\n];\n\nvar commonMimeTypes = [\n  \"application/pdf\",\n  \"audio/mpeg\",\n  \"audio/wav\",\n  \"image/png\",\n  \"image/jpeg\",\n  \"image/gif\",\n  \"video/mp4\",\n  \"video/mpeg\",\n  \"text/html\"\n];\n\nfunction setToArray(set) {\n  // shortcut if Array.from is available\n  if (Array.from) { return Array.from(set); }\n\n  var array = [];\n  set.forEach(function (item) {\n    array.push(item);\n  });\n  return array;\n}\n\n/**\n *\n * @namespace faker.system\n */\nfunction System(faker) {\n\n  /**\n   * generates a file name\n   *\n   * @method faker.system.fileName\n   */\n  this.fileName = function () {\n    var str = faker.random.words(); \n    str = str\n          .toLowerCase()\n          .replace(/\\W/g, \"_\") + \".\" + faker.system.fileExt();;\n    return str;\n  };\n\n  /**\n   * commonFileName\n   *\n   * @method faker.system.commonFileName\n   * @param {string} ext\n   */\n  this.commonFileName = function (ext) {\n    var str = faker.random.words();\n    str = str\n          .toLowerCase()\n          .replace(/\\W/g, \"_\");\n    str += \".\" + (ext || faker.system.commonFileExt());\n    return str;\n  };\n\n  /**\n   * mimeType\n   *\n   * @method faker.system.mimeType\n   */\n  this.mimeType = function () {\n    var typeSet = new Set();\n    var extensionSet = new Set();\n    var mimeTypes = faker.definitions.system.mimeTypes;\n\n    Object.keys(mimeTypes).forEach(function (m) {\n      var type = m.split(\"/\")[0];\n\n      typeSet.add(type);\n\n      if (mimeTypes[m].extensions instanceof Array) {\n        mimeTypes[m].extensions.forEach(function (ext) {\n          extensionSet.add(ext);\n        });\n      }\n    });\n\n    var types = setToArray(typeSet);\n    var extensions = setToArray(extensionSet);\n    var mimeTypeKeys = Object.keys(faker.definitions.system.mimeTypes);\n\n    return faker.random.arrayElement(mimeTypeKeys);\n  };\n\n  /**\n   * returns a commonly used file type\n   *\n   * @method faker.system.commonFileType\n   */\n  this.commonFileType = function () {\n    return faker.random.arrayElement(commonFileTypes);\n  };\n\n  /**\n   * returns a commonly used file extension\n   *\n   * @method faker.system.commonFileExt\n   */\n  this.commonFileExt = function () {\n    return faker.system.fileExt(faker.random.arrayElement(commonMimeTypes));\n  };\n\n\n  /**\n   * returns any file type available as mime-type\n   *\n   * @method faker.system.fileType\n   */\n  this.fileType = function () {\n    var typeSet = new Set();\n    var extensionSet = new Set();\n    var mimeTypes = faker.definitions.system.mimeTypes;\n\n    Object.keys(mimeTypes).forEach(function (m) {\n      var type = m.split(\"/\")[0];\n\n      typeSet.add(type);\n\n      if (mimeTypes[m].extensions instanceof Array) {\n        mimeTypes[m].extensions.forEach(function (ext) {\n          extensionSet.add(ext);\n        });\n      }\n    });\n\n    var types = setToArray(typeSet);\n    var extensions = setToArray(extensionSet);\n    var mimeTypeKeys = Object.keys(faker.definitions.system.mimeTypes);\n    return faker.random.arrayElement(types);\n\n  };\n\n  /**\n   * fileExt\n   *\n   * @method faker.system.fileExt\n   * @param {string} mimeType\n   */\n  this.fileExt = function (mimeType) {\n    var typeSet = new Set();\n    var extensionSet = new Set();\n    var mimeTypes = faker.definitions.system.mimeTypes;\n\n    Object.keys(mimeTypes).forEach(function (m) {\n      var type = m.split(\"/\")[0];\n\n      typeSet.add(type);\n\n      if (mimeTypes[m].extensions instanceof Array) {\n        mimeTypes[m].extensions.forEach(function (ext) {\n          extensionSet.add(ext);\n        });\n      }\n    });\n\n    var types = setToArray(typeSet);\n    var extensions = setToArray(extensionSet);\n    var mimeTypeKeys = Object.keys(faker.definitions.system.mimeTypes);\n\n    if (mimeType) {\n      var mimes = faker.definitions.system.mimeTypes;\n      return faker.random.arrayElement(mimes[mimeType].extensions);\n    }\n\n    return faker.random.arrayElement(extensions);\n  };\n\n  /**\n   * returns directory path\n   *\n   * @method faker.system.directoryPath\n   */\n  this.directoryPath = function () {\n    var paths = faker.definitions.system.directoryPaths\n    return faker.random.arrayElement(paths);\n  };\n\n  /**\n   * returns file path\n   *\n   * @method faker.system.filePath\n   */\n  this.filePath = function () {\n    return faker.fake(\"{{system.directoryPath}}/{{system.fileName}}.{{system.fileExt}}\");\n  };\n\n  /**\n   * semver\n   *\n   * @method faker.system.semver\n   */\n  this.semver = function () {\n    return [faker.datatype.number(9),\n      faker.datatype.number(9),\n      faker.datatype.number(9)].join('.');\n  }\n\n}\n\nmodule['exports'] = System;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}