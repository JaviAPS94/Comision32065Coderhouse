{"ast":null,"code":"/**\n *\n * @namespace faker.address\n */\nfunction Address(faker) {\n  var f = faker.fake,\n    Helpers = faker.helpers;\n\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n  this.zipCode = function (format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n    return Helpers.replaceSymbols(format);\n  };\n\n  /**\n   * Generates random zipcode from state abbreviation. If state abbreviation is\n   * not specified, a random zip code is generated according to the locale's zip format.\n   * Only works for locales with postcode_by_state definition. If a locale does not\n   * have a postcode_by_state definition, a random zip code is generated according\n   * to the locale's zip format.\n   *\n   * @method faker.address.zipCodeByState\n   * @param {String} state\n   */\n  this.zipCodeByState = function (state) {\n    var zipRange = faker.definitions.address.postcode_by_state[state];\n    if (zipRange) {\n      return faker.datatype.number(zipRange);\n    }\n    return faker.address.zipCode();\n  };\n\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   *\n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   * * `{{address.cityName}}` when city name is available\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n  this.city = function (format) {\n    var formats = ['{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}', '{{address.cityPrefix}} {{name.firstName}}', '{{name.firstName}}{{address.citySuffix}}', '{{name.lastName}}{{address.citySuffix}}'];\n    if (!format && faker.definitions.address.city_name) {\n      formats.push('{{address.cityName}}');\n    }\n    if (typeof format !== \"number\") {\n      format = faker.datatype.number(formats.length - 1);\n    }\n    return f(formats[format]);\n  };\n\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  };\n\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  };\n\n  /**\n   * Returns a random city name\n   * \n   * @method faker.address.cityName\n   */\n  this.cityName = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_name);\n  };\n\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix;\n    }\n    switch (faker.datatype.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n    return result;\n  };\n\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) {\n      useFullAddress = false;\n    }\n    var address = \"\";\n    switch (faker.datatype.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") + \" \" + faker.address.streetName();\n        break;\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n    return useFullAddress ? address + \" \" + faker.address.secondaryAddress() : address;\n  };\n\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  };\n\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  };\n\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(['Apt. ###', 'Suite ###']));\n  };\n\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  };\n\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  };\n\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   * @param {string} alphaCode default alpha-2\n   */\n  this.countryCode = function (alphaCode) {\n    if (typeof alphaCode === 'undefined' || alphaCode === 'alpha-2') {\n      return faker.random.arrayElement(faker.definitions.address.country_code);\n    }\n    if (alphaCode === 'alpha-3') {\n      return faker.random.arrayElement(faker.definitions.address.country_code_alpha_3);\n    }\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  };\n\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  };\n\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  };\n\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   * @param {Double} max default is 90\n   * @param {Double} min default is -90\n   * @param {number} precision default is 4\n   */\n  this.latitude = function (max, min, precision) {\n    max = max || 90;\n    min = min || -90;\n    precision = precision || 4;\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat(0.0.toPrecision(precision) + '1')\n    }).toFixed(precision);\n  };\n\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   * @param {Double} max default is 180\n   * @param {Double} min default is -180\n   * @param {number} precision default is 4\n   */\n  this.longitude = function (max, min, precision) {\n    max = max || 180;\n    min = min || -180;\n    precision = precision || 4;\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat(0.0.toPrecision(precision) + '1')\n    }).toFixed(precision);\n  };\n\n  /**\n   *  direction\n   *\n   * @method faker.address.direction\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.direction = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction);\n    }\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr);\n  };\n  this.direction.schema = {\n    \"description\": \"Generates a direction. Use optional useAbbr bool to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"South\", \"SW\", \"E\"]\n  };\n\n  /**\n   * cardinal direction\n   *\n   * @method faker.address.cardinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.cardinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction.slice(0, 4));\n    }\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(0, 4));\n  };\n  this.cardinalDirection.schema = {\n    \"description\": \"Generates a cardinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"North\", \"South\", \"E\", \"W\"]\n  };\n\n  /**\n   * ordinal direction\n   *\n   * @method faker.address.ordinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.ordinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction.slice(4, 8));\n    }\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(4, 8));\n  };\n  this.ordinalDirection.schema = {\n    \"description\": \"Generates an ordinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"Southeast\", \"SW\", \"NE\"]\n  };\n  this.nearbyGPSCoordinate = function (coordinate, radius, isMetric) {\n    function randomFloat(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n    function degreesToRadians(degrees) {\n      return degrees * (Math.PI / 180.0);\n    }\n    function radiansToDegrees(radians) {\n      return radians * (180.0 / Math.PI);\n    }\n    function kilometersToMiles(miles) {\n      return miles * 0.621371;\n    }\n    function coordinateWithOffset(coordinate, bearing, distance, isMetric) {\n      var R = 6378.137; // Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)\n      var d = isMetric ? distance : kilometersToMiles(distance); // Distance in km\n\n      var lat1 = degreesToRadians(coordinate[0]); //Current lat point converted to radians\n      var lon1 = degreesToRadians(coordinate[1]); //Current long point converted to radians\n\n      var lat2 = Math.asin(Math.sin(lat1) * Math.cos(d / R) + Math.cos(lat1) * Math.sin(d / R) * Math.cos(bearing));\n      var lon2 = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(d / R) * Math.cos(lat1), Math.cos(d / R) - Math.sin(lat1) * Math.sin(lat2));\n\n      // Keep longitude in range [-180, 180]\n      if (lon2 > degreesToRadians(180)) {\n        lon2 = lon2 - degreesToRadians(360);\n      } else if (lon2 < degreesToRadians(-180)) {\n        lon2 = lon2 + degreesToRadians(360);\n      }\n      return [radiansToDegrees(lat2), radiansToDegrees(lon2)];\n    }\n\n    // If there is no coordinate, the best we can do is return a random GPS coordinate.\n    if (coordinate === undefined) {\n      return [faker.address.latitude(), faker.address.longitude()];\n    }\n    radius = radius || 10.0;\n    isMetric = isMetric || false;\n\n    // TODO: implement either a gaussian/uniform distribution of points in cicular region.\n    // Possibly include param to function that allows user to choose between distributions.\n\n    // This approach will likely result in a higher density of points near the center.\n    var randomCoord = coordinateWithOffset(coordinate, degreesToRadians(Math.random() * 360.0), radius, isMetric);\n    return [randomCoord[0].toFixed(4), randomCoord[1].toFixed(4)];\n  };\n\n  /**\n     * Return a random time zone\n     * @method faker.address.timeZone\n     */\n  this.timeZone = function () {\n    return faker.random.arrayElement(faker.definitions.address.time_zone);\n  };\n  return this;\n}\nmodule.exports = Address;","map":{"version":3,"names":["Address","faker","f","fake","Helpers","helpers","zipCode","format","localeFormat","definitions","address","postcode","random","arrayElement","replaceSymbols","zipCodeByState","state","zipRange","postcode_by_state","datatype","number","city","formats","city_name","push","length","cityPrefix","city_prefix","citySuffix","city_suffix","cityName","streetName","result","suffix","streetSuffix","name","lastName","firstName","streetAddress","useFullAddress","undefined","replaceSymbolWithNumber","secondaryAddress","street_suffix","streetPrefix","street_prefix","county","country","countryCode","alphaCode","country_code","country_code_alpha_3","useAbbr","stateAbbr","state_abbr","latitude","max","min","precision","parseFloat","toPrecision","toFixed","longitude","direction","direction_abbr","schema","cardinalDirection","slice","ordinalDirection","nearbyGPSCoordinate","coordinate","radius","isMetric","randomFloat","Math","degreesToRadians","degrees","PI","radiansToDegrees","radians","kilometersToMiles","miles","coordinateWithOffset","bearing","distance","R","d","lat1","lon1","lat2","asin","sin","cos","lon2","atan2","randomCoord","timeZone","time_zone","module","exports"],"sources":["/Volumes/Datos/Coderhouse/Comision32065Coderhouse/clase41/webApplication/frontend/node_modules/faker/lib/address.js"],"sourcesContent":["/**\n *\n * @namespace faker.address\n */\nfunction Address (faker) {\n  var f = faker.fake,\n    Helpers = faker.helpers;\n\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n  this.zipCode = function(format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n    return Helpers.replaceSymbols(format);\n  }\n\n  /**\n   * Generates random zipcode from state abbreviation. If state abbreviation is\n   * not specified, a random zip code is generated according to the locale's zip format.\n   * Only works for locales with postcode_by_state definition. If a locale does not\n   * have a postcode_by_state definition, a random zip code is generated according\n   * to the locale's zip format.\n   *\n   * @method faker.address.zipCodeByState\n   * @param {String} state\n   */\n  this.zipCodeByState = function (state) {\n    var zipRange = faker.definitions.address.postcode_by_state[state];\n    if (zipRange) {\n      return faker.datatype.number(zipRange);\n    }\n    return faker.address.zipCode();\n  }\n\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   *\n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   * * `{{address.cityName}}` when city name is available\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n  this.city = function (format) {\n    var formats = [\n      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',\n      '{{address.cityPrefix}} {{name.firstName}}',\n      '{{name.firstName}}{{address.citySuffix}}',\n      '{{name.lastName}}{{address.citySuffix}}'\n    ];\n\n    if (!format && faker.definitions.address.city_name) {\n      formats.push('{{address.cityName}}');\n    }\n\n    if (typeof format !== \"number\") {\n      format = faker.datatype.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n\n  }\n\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  }\n\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  }\n\n  /**\n   * Returns a random city name\n   * \n   * @method faker.address.cityName\n   */\n  this.cityName = function() {\n    return faker.random.arrayElement(faker.definitions.address.city_name);\n  }\n\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix\n    }\n\n    switch (faker.datatype.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n    return result;\n  }\n\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) { useFullAddress = false; }\n    var address = \"\";\n    switch (faker.datatype.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") +  \" \" + faker.address.streetName();\n        break;\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n    return useFullAddress ? (address + \" \" + faker.address.secondaryAddress()) : address;\n  }\n\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  }\n\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  }\n\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(\n      [\n        'Apt. ###',\n        'Suite ###'\n      ]\n    ));\n  }\n\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  }\n\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  }\n\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   * @param {string} alphaCode default alpha-2\n   */\n  this.countryCode = function (alphaCode) {\n    \n    if (typeof alphaCode === 'undefined' || alphaCode === 'alpha-2') {\n      return faker.random.arrayElement(faker.definitions.address.country_code);\n    }\n\n    if (alphaCode === 'alpha-3') {\n      return faker.random.arrayElement(faker.definitions.address.country_code_alpha_3);\n    }\n      \n    return faker.random.arrayElement(faker.definitions.address.country_code);\n\n  }\n\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  }\n\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  }\n\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   * @param {Double} max default is 90\n   * @param {Double} min default is -90\n   * @param {number} precision default is 4\n   */\n  this.latitude = function (max, min, precision) {\n    max       = max || 90\n    min       = min || -90\n    precision = precision || 4\n\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat((0.0).toPrecision(precision) + '1')\n    }).toFixed(precision);\n  }\n\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   * @param {Double} max default is 180\n   * @param {Double} min default is -180\n   * @param {number} precision default is 4\n   */\n  this.longitude = function (max, min, precision) {\n    max       = max || 180\n    min       = min || -180\n    precision = precision || 4\n\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat((0.0).toPrecision(precision) + '1')\n    }).toFixed(precision);\n  }\n\n  /**\n   *  direction\n   *\n   * @method faker.address.direction\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.direction = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction);\n    }\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr);\n  }\n\n  this.direction.schema = {\n    \"description\": \"Generates a direction. Use optional useAbbr bool to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"South\", \"SW\", \"E\"]\n  };\n\n  /**\n   * cardinal direction\n   *\n   * @method faker.address.cardinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.cardinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return (\n        faker.random.arrayElement(faker.definitions.address.direction.slice(0, 4))\n      );\n    }\n    return (\n      faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(0, 4))\n    );\n  }\n\n  this.cardinalDirection.schema = {\n    \"description\": \"Generates a cardinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"North\", \"South\", \"E\", \"W\"]\n  };\n\n  /**\n   * ordinal direction\n   *\n   * @method faker.address.ordinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.ordinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return (\n        faker.random.arrayElement(faker.definitions.address.direction.slice(4, 8))\n      );\n    }\n    return (\n      faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(4, 8))\n    );\n  }\n\n  this.ordinalDirection.schema = {\n    \"description\": \"Generates an ordinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"Southeast\", \"SW\", \"NE\"]\n  };\n\n  this.nearbyGPSCoordinate = function(coordinate, radius, isMetric) {\n    function randomFloat(min, max) {\n      return Math.random() * (max-min) + min;\n    }\n    function degreesToRadians(degrees) {\n      return degrees * (Math.PI/180.0);\n    }\n    function radiansToDegrees(radians) {\n      return radians * (180.0/Math.PI);\n    }\n    function kilometersToMiles(miles) {\n      return miles * 0.621371;\n    }\n    function coordinateWithOffset(coordinate, bearing, distance, isMetric) {\n      var R = 6378.137; // Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)\n      var d = isMetric ? distance : kilometersToMiles(distance); // Distance in km\n\n      var lat1 = degreesToRadians(coordinate[0]); //Current lat point converted to radians\n      var lon1 = degreesToRadians(coordinate[1]); //Current long point converted to radians\n\n      var lat2 = Math.asin(Math.sin(lat1) * Math.cos(d/R) +\n                Math.cos(lat1) * Math.sin(d/R) * Math.cos(bearing));\n\n      var lon2 = lon1 + Math.atan2(\n        Math.sin(bearing) * Math.sin(d/R) * Math.cos(lat1),\n        Math.cos(d/R) - Math.sin(lat1) * Math.sin(lat2));\n\n      // Keep longitude in range [-180, 180]\n      if (lon2 > degreesToRadians(180)) {\n        lon2 = lon2 - degreesToRadians(360);\n      } else if (lon2 < degreesToRadians(-180)) {\n        lon2 = lon2 + degreesToRadians(360);\n      }\n\n      return [radiansToDegrees(lat2), radiansToDegrees(lon2)];\n    }\n\n    // If there is no coordinate, the best we can do is return a random GPS coordinate.\n    if (coordinate === undefined) {\n      return [faker.address.latitude(), faker.address.longitude()]\n    }\n    radius = radius || 10.0;\n    isMetric = isMetric || false;\n\n    // TODO: implement either a gaussian/uniform distribution of points in cicular region.\n    // Possibly include param to function that allows user to choose between distributions.\n\n    // This approach will likely result in a higher density of points near the center.\n    var randomCoord = coordinateWithOffset(coordinate, degreesToRadians(Math.random() * 360.0), radius, isMetric);\n    return [randomCoord[0].toFixed(4), randomCoord[1].toFixed(4)];\n  }\n\n  /**\n     * Return a random time zone\n     * @method faker.address.timeZone\n     */\n  this.timeZone = function() {\n    return faker.random.arrayElement(faker.definitions.address.time_zone);\n  }\n\n  return this;\n}\n\nmodule.exports = Address;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}