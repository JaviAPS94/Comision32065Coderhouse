{"ast":null,"code":"/**\n * @namespace faker.git\n */\n\nvar Git = function (faker) {\n  var self = this;\n  var f = faker.fake;\n  var hexChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\n  /**\n   * branch\n   *\n   * @method faker.git.branch\n   */\n  self.branch = function () {\n    var noun = faker.hacker.noun().replace(' ', '-');\n    var verb = faker.hacker.verb().replace(' ', '-');\n    return noun + '-' + verb;\n  };\n\n  /**\n   * commitEntry\n   *\n   * @method faker.git.commitEntry\n   * @param {object} options\n   */\n  self.commitEntry = function (options) {\n    options = options || {};\n    var entry = 'commit {{git.commitSha}}\\r\\n';\n    if (options.merge || faker.datatype.number({\n      min: 0,\n      max: 4\n    }) === 0) {\n      entry += 'Merge: {{git.shortSha}} {{git.shortSha}}\\r\\n';\n    }\n    entry += 'Author: {{name.firstName}} {{name.lastName}} <{{internet.email}}>\\r\\n';\n    entry += 'Date: ' + faker.date.recent().toString() + '\\r\\n';\n    entry += '\\r\\n\\xa0\\xa0\\xa0\\xa0{{git.commitMessage}}\\r\\n';\n    return f(entry);\n  };\n\n  /**\n   * commitMessage\n   *\n   * @method faker.git.commitMessage\n   */\n  self.commitMessage = function () {\n    var format = '{{hacker.verb}} {{hacker.adjective}} {{hacker.noun}}';\n    return f(format);\n  };\n\n  /**\n   * commitSha\n   *\n   * @method faker.git.commitSha\n   */\n  self.commitSha = function () {\n    var commit = \"\";\n    for (var i = 0; i < 40; i++) {\n      commit += faker.random.arrayElement(hexChars);\n    }\n    return commit;\n  };\n\n  /**\n   * shortSha\n   *\n   * @method faker.git.shortSha\n   */\n  self.shortSha = function () {\n    var shortSha = \"\";\n    for (var i = 0; i < 7; i++) {\n      shortSha += faker.random.arrayElement(hexChars);\n    }\n    return shortSha;\n  };\n  return self;\n};\nmodule['exports'] = Git;","map":{"version":3,"names":["Git","faker","self","f","fake","hexChars","branch","noun","hacker","replace","verb","commitEntry","options","entry","merge","datatype","number","min","max","date","recent","toString","commitMessage","format","commitSha","commit","i","random","arrayElement","shortSha","module"],"sources":["/Volumes/Datos/Coderhouse/Comision32065Coderhouse/clase41/webApplication/frontend/node_modules/faker/lib/git.js"],"sourcesContent":["/**\n * @namespace faker.git\n */\n\nvar Git = function(faker) {\n  var self = this;\n  var f = faker.fake;\n\n  var hexChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\n  /**\n   * branch\n   *\n   * @method faker.git.branch\n   */\n  self.branch = function() {\n    var noun = faker.hacker.noun().replace(' ', '-');\n    var verb = faker.hacker.verb().replace(' ', '-');\n    return noun + '-' + verb;\n  }\n\n  /**\n   * commitEntry\n   *\n   * @method faker.git.commitEntry\n   * @param {object} options\n   */\n  self.commitEntry = function(options) {\n    options = options || {};\n\n    var entry = 'commit {{git.commitSha}}\\r\\n';\n\n    if (options.merge || (faker.datatype.number({ min: 0, max: 4 }) === 0)) {\n      entry += 'Merge: {{git.shortSha}} {{git.shortSha}}\\r\\n';\n    }\n\n    entry += 'Author: {{name.firstName}} {{name.lastName}} <{{internet.email}}>\\r\\n';\n    entry += 'Date: ' + faker.date.recent().toString() + '\\r\\n';\n    entry += '\\r\\n\\xa0\\xa0\\xa0\\xa0{{git.commitMessage}}\\r\\n';\n\n    return f(entry);\n  };\n\n  /**\n   * commitMessage\n   *\n   * @method faker.git.commitMessage\n   */\n  self.commitMessage = function() {\n    var format = '{{hacker.verb}} {{hacker.adjective}} {{hacker.noun}}';\n    return f(format);\n  };\n\n  /**\n   * commitSha\n   *\n   * @method faker.git.commitSha\n   */\n  self.commitSha = function() {\n    var commit = \"\";\n\n    for (var i = 0; i < 40; i++) {\n      commit += faker.random.arrayElement(hexChars);\n    }\n\n    return commit;\n  };\n\n  /**\n   * shortSha\n   *\n   * @method faker.git.shortSha\n   */\n  self.shortSha = function() {\n    var shortSha = \"\";\n\n    for (var i = 0; i < 7; i++) {\n      shortSha += faker.random.arrayElement(hexChars);\n    }\n\n    return shortSha;\n  };\n\n  return self;\n}\n\nmodule['exports'] = Git;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,IAAIA,GAAG,GAAG,UAASC,KAAK,EAAE;EACxB,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,CAAC,GAAGF,KAAK,CAACG,IAAI;EAElB,IAAIC,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;EAE/F;AACF;AACA;AACA;AACA;EACEH,IAAI,CAACI,MAAM,GAAG,YAAW;IACvB,IAAIC,IAAI,GAAGN,KAAK,CAACO,MAAM,CAACD,IAAI,EAAE,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAChD,IAAIC,IAAI,GAAGT,KAAK,CAACO,MAAM,CAACE,IAAI,EAAE,CAACD,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAChD,OAAOF,IAAI,GAAG,GAAG,GAAGG,IAAI;EAC1B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACER,IAAI,CAACS,WAAW,GAAG,UAASC,OAAO,EAAE;IACnCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,IAAIC,KAAK,GAAG,8BAA8B;IAE1C,IAAID,OAAO,CAACE,KAAK,IAAKb,KAAK,CAACc,QAAQ,CAACC,MAAM,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAE,CAAC,CAAC,KAAK,CAAE,EAAE;MACtEL,KAAK,IAAI,8CAA8C;IACzD;IAEAA,KAAK,IAAI,uEAAuE;IAChFA,KAAK,IAAI,QAAQ,GAAGZ,KAAK,CAACkB,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE,GAAG,MAAM;IAC3DR,KAAK,IAAI,+CAA+C;IAExD,OAAOV,CAAC,CAACU,KAAK,CAAC;EACjB,CAAC;;EAED;AACF;AACA;AACA;AACA;EACEX,IAAI,CAACoB,aAAa,GAAG,YAAW;IAC9B,IAAIC,MAAM,GAAG,sDAAsD;IACnE,OAAOpB,CAAC,CAACoB,MAAM,CAAC;EAClB,CAAC;;EAED;AACF;AACA;AACA;AACA;EACErB,IAAI,CAACsB,SAAS,GAAG,YAAW;IAC1B,IAAIC,MAAM,GAAG,EAAE;IAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BD,MAAM,IAAIxB,KAAK,CAAC0B,MAAM,CAACC,YAAY,CAACvB,QAAQ,CAAC;IAC/C;IAEA,OAAOoB,MAAM;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;EACEvB,IAAI,CAAC2B,QAAQ,GAAG,YAAW;IACzB,IAAIA,QAAQ,GAAG,EAAE;IAEjB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BG,QAAQ,IAAI5B,KAAK,CAAC0B,MAAM,CAACC,YAAY,CAACvB,QAAQ,CAAC;IACjD;IAEA,OAAOwB,QAAQ;EACjB,CAAC;EAED,OAAO3B,IAAI;AACb,CAAC;AAED4B,MAAM,CAAC,SAAS,CAAC,GAAG9B,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}